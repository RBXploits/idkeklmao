--logging (coming soon)
--security
local code200 = "Westhub Security: Code 200 (Whitelisted)"
local code201 = "Westhub Security: Code 201 (Correct Key)"
local code402 = "Westhub Security: Code 402 (Incorrect Key)"
local code401 = "Westhub Security: Code 401 (Not Whitelisted)"
local code358 = "Westhub Security: Code 358 (Attmepted Bypass)"
local loggedIn = false
_G.wl_key = "373dc60ebde6bc772e2b1c46829c2ed49f68fb9adaad6b975198c04d0927"

local HWID = game:GetService("RbxAnalyticsService"):GetClientId();
local HWIDs = {
"714A3308-FF76-44FB-BE76-52FA12FD88E6", --me
"C536D066-F17B-482C-A3BB-9E0940ABD6B0", --slac mom
"D19A4D64-81B3-4E8D-9D5C-C6EA9DBE622F", --slac dad
"18C5906B-6A15-4E03-9E68-20489FDA48BB", --isolatez
"2F4ED701-DBBA-49B5-AF9A-AC3B10F1B68B", --jello
"0003AFC9-9824-4795-A179-2C4601634E07" --taco
}
local whitelisted2 = false

function CheckHWID(hwidval)
    for _, whitelisted in ipairs(HWIDs) do
        if hwidval == whitelisted then
            return true
        end
    end
    return false
end

whitelisted2 = CheckHWID(HWID)

if whitelisted2 == true then
print(code200)
loggedIn = true
else
print(code401)
loggedIn = false
plr:Kick(code401)
end

if _G.Key == _G.wl_key then
print(code201)
loggedIn = true
else
print(code402)
plr:Kick(code402)
loggedIn = false
end
if loggedIn == true then
print(loggedIn)
else
print(loggedIn)
plr:Kick(code358)
end

local Players = game:GetService("Players")
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "WESTHUB", HidePremium = false, SaveConfig = false, IntroEnabled = true, IntroText = "WESTHUB", ConfigFolder = "OrionTest"})
    local WelcomeTab = Window:MakeTab({
        Name = "Welcome!",
        Icon = "rbxassetid://7733946818",
        PremiumOnly = false
    })

--main shit

local dupeTab = Window:MakeTab({
	Name = "DUPING",
	Icon = "rbxassetid://7733954058",
	PremiumOnly = false
})

dupeTab:AddButton({
	Name = "Dupe Previous Trades",
	Callback = function()
        local v1 = 0

        local Death;
        
        function Death()
            spawn(function()
                local v2 = {
                    [1] = "GetPlayerData"
                }
                game:GetService("ReplicatedStorage").NetworkRemoteFunction:InvokeServer(unpack(v2))
            end)
        end
        
        task.spawn(function()
            while true do
                if v1 >= 5 then
                    break
                end
                
                for i=1,2500 do
                    task.spawn(function()
                        Death()
                    end)
                end
                
                v1 = v1 + 1
                task.wait(1.5)
            end
        end)
  	end   
})
dupeTab:AddParagraph("Is this all?","For now, this is all there is on this tab! Suggest more to be added on the discord.")

local tradeTab = Window:MakeTab({
    Name = "Trading",
    Icon = "rbxassetid://12688392967",
    PremiumOnly = false
})
local PlayerSelect; 

local playerNames = {}
for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
    table.insert(playerNames, player.Name)
end

tradeTab:AddDropdown({
	Name = "Target",
	Default = playerNames[1],
	Options = playerNames,
	Callback = function(v)
		PlayerSelect = v
	end
})

tradeTab:AddToggle({
    Name = "Auto Trade",
    Default = false,
    Callback = function(AT)
        if AT == true then
            _G.AUTOTRADE = AT
            while _G.AUTOTRADE == true do
                wait()
                local SelectedPlayer = game:GetService("Players"):FindFirstChild(PlayerSelect)
                if SelectedPlayer then
                    local args = {
                        [1] = "TradeSendRequest",
                        [2] = SelectedPlayer
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkRemoteEvent"):FireServer(unpack(args))
                end
                if AT == false then
                    _G.AUTOTRADE = false
                    break
                end
            end
        else
            _G.AUTOTRADE = false
        end
    end
})

tradeTab:AddToggle({
	Name = "Auto Accept",
	Default = false,
	Callback = function(AC)
		if AC == true then
			_G.AUTOACCEPT = AC
			while _G.AUTOACCEPT == true do
				wait()
				local args = {
					[1] = "TradeReady",
				}
				local args2 = {
					[1] = "TradeConfirm"
				}

				game:GetService("ReplicatedStorage"):WaitForChild("NetworkRemoteEvent"):FireServer(unpack(args))
				game:GetService("ReplicatedStorage"):WaitForChild("NetworkRemoteEvent"):FireServer(unpack(args2))

				if AC == false then
					_G.AUTOACCEPT = false
					break
			end
			end
		else
			_G.AUTOACCEPT = false
		end
end
})

tradeTab:AddButton({
	Name = "Add All Pets",
	Callback = function()
		for i,pets in pairs(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.TradeFrame.YourInventory.Grid:GetChildren()) do
			local args = {
				[1] = "TradeAddItem",
				[2] = pets.Name
			}
			game:GetService("ReplicatedStorage"):WaitForChild("NetworkRemoteEvent"):FireServer(unpack(args))
		end
	end
})

tradeTab:AddButton({
	Name = "Remove All Pets",
	Callback = function()
		for i,pets in pairs(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.TradeFrame.YourInventory.Grid:GetChildren()) do
			local args = {
				[1] = "TradeRemoveItem",
				[2] = pets.Name
			}
			game:GetService("ReplicatedStorage"):WaitForChild("NetworkRemoteEvent"):FireServer(unpack(args))
		end
	end
})

--tradeTab:AddParagraph("Coming Soon", "Sorry, but this category is currently Work in Progress and is not available yet!")
local farmTab = Window:MakeTab({
	Name = "Auto Farm",
	Icon = "rbxassetid://7733674402",
	PremiumOnly = false
})

local AutoBlowMe = false

function SomeRandomFunction()
    task.spawn(function()
        while AutoBlowMe == true do
            wait(0.1)
            if AutoBlowMe == false then
                break
            end
            wait(0.01)
            local args = {
                [1] = "BlowBubble"
            }
            if AutoBlowMe == true then
                game:GetService("ReplicatedStorage").NetworkRemoteEvent:FireServer(unpack(args))
                task.wait(0.15)
            else
                break
            end
            task.wait()
        end
    end)
end

farmTab:AddToggle({
    Name = "Auto Bubble",
    Default = false,
    Callback = function(Value)
        AutoBlowMe = Value
        if AutoBlowMe == true then
            SomeRandomFunction()
        end
    end
})


local eggSection = farmTab:AddSection({
    Name = "Egg Farming"
})
local EggV = false
local singHatchV = false
local triHatchV = false

function WhatTheFuck()
    task.spawn(function()
        while singHatchV do
            wait()
            if EggV ~= nil then
                wait()
                local args = {
                    [1] = "PurchaseEgg",
                    [2] = EggV,
                    [3] = "Single"
                }
                game:GetService("ReplicatedStorage").NetworkRemoteEvent:FireServer(unpack(args))
                wait()
                if singHatchV == nil or singHatchV == false then
                    break
                end
            end
            if singHatchV == nil or singHatchV == false then
                break
            end
            wait()
        end
    end)
end

function WhatTheFuck2()
    task.spawn(function()
        while triHatchV do
            wait()
            if EggV ~= nil then
                wait()
                local args = {
                    [1] = "PurchaseEgg",
                    [2] = EggV,
                    [3] = "Triple"
                }
                game:GetService("ReplicatedStorage").NetworkRemoteEvent:FireServer(unpack(args))
				
                wait()
                if triHatchV == nil or triHatchV == false then
                    break
                end
            end
            if triHatchV == nil or triHatchV == false then
                break
            end
            wait()
        end
    end)
end

eggSection:AddTextbox({
    Name = "Auto Hatch Egg",
    Default = "Common Egg",
    TextDisappear = false,
    Callback = function(EggValue)
        EggV = EggValue
		
    end
})
eggSection:AddToggle({
    Name = "Toggle Single Autohatch",
    Default = false,
    Callback = function(singHatch)
        singHatchV = singHatch
        if singHatchV == true then
            WhatTheFuck()
			OrionLib:MakeNotification({
				Name = "Auto Hatch toggled",
				Content = "Singular Auto Hatch has been toggled.",
				Image = "rbxassetid://8997385940",
				Time = 5
			})
        end
    end
})

eggSection:AddToggle({
    Name = "Toggle Triple Autohatch",
    Default = false,
    Callback = function(triHatch)
        triHatchV = triHatch
        if triHatchV == true then
            WhatTheFuck2()
			OrionLib:MakeNotification({
				Name = "Auto Hatch toggled",
				Content = "Triple Auto Hatch has been toggled.",
				Image = "rbxassetid://8997385940",
				Time = 5
			})
        end
    end
})

eggSection:AddButton({
	Name = "Remove Hatch Animation",
	Callback = function()
        local ParentModule = require(game:GetService("ReplicatedStorage").Assets.Modules.EggService)
    repeat
        wait()
        ParentModule = require(game:GetService("ReplicatedStorage").Assets.Modules.EggService)
    until ParentModule ~= nil
    local hatch = ParentModule.HatchEgg
        ParentModule.HatchEgg = (function()end or hatch)
		OrionLib:MakeNotification({
			Name = "Hatch Animation disabled",
			Content = "Hatch Animation has been disabled. Cannot be re-enabled!",
			Image = "rbxassetid://8997385940",
			Time = 5
		})
  	end    
})
--farmTab:AddParagraph("More Coming Soon","This category is still under development.")

local Credits = Window:MakeTab({
	Name = "Credits",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
Credits:AddParagraph("Creator:","apple bottom#2655")
Credits:AddParagraph("Noted:","romeo#4897")



OrionLib:Init()
